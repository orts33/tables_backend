import { Injectable, Logger, OnModuleInit } from '@nestjs/common';
import { Start, Update, InjectBot, Ctx, Action, Command } from 'nestjs-telegraf';
import { Telegraf } from 'telegraf';
import { UserService } from '../user/user.service';
import { PaymentsService } from '../payment/payments.service';
import * as process from 'node:process';

@Update()
@Injectable()
export class BotService implements OnModuleInit {
    private readonly logger = new Logger(BotService.name);

    constructor(
        private readonly userService: UserService,
        private readonly paymentsService: PaymentsService,
        @InjectBot() private readonly bot: Telegraf,
    ) {}


    // --- —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ---
    private userTopupSelections: Map<number, number> = new Map();

    async onModuleInit() {
        this.logger.log('üöÄ Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

        const adminTelegramId = process.env.ADMIN_TELEGRAM_ID;
        if (adminTelegramId) {
            try {
                await this.bot.telegram.sendMessage(
                    adminTelegramId,
                    `ü§ñ Bot –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.</b>\n\n<i>–ü–æ–¥–∫–ª—é—á–µ–Ω–æ:</i> ${new Date().toLocaleString()}`,
                    { parse_mode: 'HTML' }
                );
                this.logger.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É: ${adminTelegramId}`);
            } catch (error) {
                this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: ${error.message}`);
            }
        } else {
            this.logger.warn('‚ö†Ô∏è ADMIN_TELEGRAM_ID –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env');
        }
    }

    @Start()
    @Command('start')
    async handleStart(@Ctx() ctx: any) {
        const { id, username, first_name, last_name } = ctx.from;
        const telegramId = id.toString();
        const startParam = ctx.startPayload || '';
        const photoUrl = await this.getUserPhoto(id);

        let referrerId: string | null = null;
        if (startParam.startsWith('ref_')) {
            const extractedId = startParam.replace('ref_', '');
            if (extractedId === telegramId) {
                await ctx.reply('üôÉ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.');
            } else {
                referrerId = extractedId;
            }
        }

        try {
            await this.userService.registerUser({
                telegramId,
                username,
                firstName: first_name,
                lastName: last_name,
                photoUrl,
                referrerId,
            });

            this.logger.log(
                `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω${referrerId ? ` (—Ä–µ—Ñ: ${referrerId})` : ''}`
            );

            const referralLink = `https://t.me/${process.env.TELEGRAM_BOT_NAME}?start=ref_${telegramId}`;

            await ctx.reply(
                `üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TableMaster, ${first_name || '–ò–≥—Ä–æ–∫'}!</b>\n\n` +
                `üì® <i>–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã!</i>\n\n` +
                `üîó <b>–í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n` +
                `${referralLink}\n\n` +
                `üéÅ <b>–ó–∞ –∫–∞–∂–¥—ã—Ö 5 –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤</b> –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ <b>–±–æ–Ω—É—Å–Ω—ã–µ –º–æ–Ω–µ—Ç—ã</b>! ü™ô\n\n` +
                `üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:`,
                {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å Mini App',
                                    web_app: { url: process.env.MINI_APP_URL },
                                },
                            ],
                            [
                                { text: 'üí∞ –§–∏–Ω–∞–Ω—Å—ã', callback_data: 'finance_menu' },
                            ],
                            [
                                {
                                    text: 'üîó –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É',
                                    callback_data: `copy_ref_${telegramId}`,
                                },
                            ],
                            [
                                {
                                    text: 'üîÅ –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å /start',
                                    callback_data: `repeat_start_${telegramId}`,
                                },
                            ],
                        ],
                    },
                }
            );
        } catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ${telegramId}: ${error.message}`);
            await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ!');
        }
    }

    @Action(/copy_ref_(.+)/)
    async handleCopyReferral(@Ctx() ctx: any) {
        const telegramId = ctx.match[1];
        const referralLink = `https://t.me/${process.env.TELEGRAM_BOT_NAME}?start=ref_${telegramId}`;
        await ctx.reply(`üîó –í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n${referralLink}`);
    }

    @Action(/repeat_start_(.+)/)
    async handleRepeatStart(@Ctx() ctx: any) {
        const telegramId = ctx.match[1];
        ctx.startPayload = '';
        await this.handleStart(ctx);
    }

    @Command('withdraw')
    async handleWithdraw(@Ctx() ctx: any) {
        await ctx.reply('üí∏ –î–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –∏ –∞–¥—Ä–µ—Å TON Wallet –≤—Ä—É—á–Ω—É—é. –§–æ—Ä–º–∞ –±—É–¥–µ—Ç –ø–æ–∑–∂–µ.');
    }

    @Command('topup')
    async handleTopup(@Ctx() ctx: any) {
        const userId = ctx.from.id;
        const amount = 10; // –≤—Ä–µ–º–µ–Ω–Ω–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞

        const invoice = await this.paymentsService.createInvoice({
            amount,
            currency: 'USDT',
            description: `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId}`,
            callbackUrl: `${process.env.BACKEND_URL}/payments/webhook`,
        }, userId);

        await ctx.reply(
            `üí∞ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ ${amount} USDT</b>\n\n` +
            `–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ:`,
            {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚úÖ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', url: invoice.link }],
                    ],
                },
            }
        );
    }

    private async getUserPhoto(userId: number): Promise<string | null> {
        try {
            const photos = await this.bot.telegram.getUserProfilePhotos(userId, 0, 1);
            if (photos.total_count > 0) {
                const fileId = photos.photos[0][0].file_id;
                const file = await this.bot.telegram.getFile(fileId);
                return `https://api.telegram.org/file/bot${process.env.TELEGRAM_BOT_TOKEN}/${file.file_path}`;
            }
        } catch (error) {
            this.logger.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –¥–ª—è ${userId}: ${error.message}`);
        }
        return null;
    }

    @Command('finance')
    @Action('finance_menu')
    async showFinanceMenu(@Ctx() ctx: any) {
        const balance = await this.userService.getBalanceByTelegramId(ctx.from.id.toString());

        await ctx.reply(
            `üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>${balance} USDT</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
            {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å', callback_data: 'finance_topup' }],
                        [{ text: 'üì§ –í—ã–≤–µ—Å—Ç–∏', callback_data: 'finance_withdraw' }],
                        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }],
                    ],
                },
            }
        );
    }


    @Action('finance_topup')
    async handleFinanceTopup(@Ctx() ctx: any) {
        await ctx.reply(
            'üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è USDT:',
            {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '3 USDT', callback_data: 'topup_amount_3' },
                            { text: '5 USDT', callback_data: 'topup_amount_5' },
                            { text: '10 USDT', callback_data: 'topup_amount_10' },
                        ],
                        [
                            { text: '15 USDT', callback_data: 'topup_amount_15' },
                            { text: '25 USDT', callback_data: 'topup_amount_25' },
                        ],
                        [
                            { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'finance_menu' },
                        ],
                    ],
                },
            }
        );
    }

    @Action(/topup_amount_(\d+)/)
    async handleTopupAmount(@Ctx() ctx: any) {
        const telegramId = ctx.from.id;
        const amount = parseInt(ctx.match[1]);

        if (isNaN(amount) || amount < 3) {
            await ctx.reply('‚ö†Ô∏è –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 USDT.');
            return;
        }

        this.userTopupSelections.set(telegramId, amount);

        await ctx.reply(
            `–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ <b>${amount} USDT</b>. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
            {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: 'topup_confirm' },
                            { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'finance_topup' },
                        ],
                    ],
                },
            }
        );
    }


    @Action('topup_confirm')
    async handleTopupConfirm(@Ctx() ctx: any) {
        const telegramId = ctx.from.id;
        const amount = this.userTopupSelections.get(telegramId);

        if (!amount || amount < 3) {
            await ctx.reply('‚ö†Ô∏è –°—É–º–º–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.');
            return;
        }

        try {
            const invoice = await this.paymentsService.createInvoice({
                amount,
                currency: 'USDT',
                description: `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${telegramId}`,
                callbackUrl: `${process.env.BACKEND_URL}/payments/webhook`,
            }, telegramId);

            await ctx.reply(
                `üí∞ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ ${amount} USDT</b>\n\n` +
                `–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ:`,
                {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚úÖ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', url: invoice.link }],
                        ],
                    },
                }
            );
        } catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞: ${error.message}`);
            await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }



    // –í—ã–≤–æ–¥
        @Action('finance_withdraw')
        async handleFinanceWithdraw(@Ctx() ctx: any) {
            await this.handleWithdraw(ctx); // –≤—ã–∑—ã–≤–∞–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥
        }


    @Action('back_to_start')
    async handleBackToStart(@Ctx() ctx: any) {
        await this.handleStart(ctx);
    }
}
