import { Injectable, Logger, OnModuleInit } from '@nestjs/common';
import {Start, Update, InjectBot, Ctx, Action, Command, On} from 'nestjs-telegraf';
import { Telegraf } from 'telegraf';
import { UserService } from '../user/user.service';
import { PaymentsService } from '../payment/payments.service';
import * as process from 'node:process';
import {PrismaService} from "../prisma/prisma.service";

@Update()
@Injectable()
export class BotService implements OnModuleInit {
    private readonly logger = new Logger(BotService.name);

    constructor(
        private readonly userService: UserService,
        private readonly paymentsService: PaymentsService,
        private readonly prisma: PrismaService,
        @InjectBot() private readonly bot: Telegraf,
    ) {}

    private userTopupSelections: Map<number, number> = new Map();
    private navigationStacks: Map<number, string[]> = new Map();

    async sendMessage(chatId: string, text: string, options?: any) {
        try {
            await this.bot.telegram.sendMessage(chatId, text, options);
        } catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`);
            throw error;
        }
    }

    private pushToStack(userId: number, screen: string) {
        const stack = this.navigationStacks.get(userId) || [];
        if (stack[stack.length - 1] !== screen) {
            stack.push(screen);
        }
        this.navigationStacks.set(userId, stack);
    }

    private popFromStack(userId: number): string | null {
        const stack = this.navigationStacks.get(userId);
        if (stack && stack.length > 1) {
            stack.pop();
            return stack[stack.length - 1];
        }
        return null;
    }

    async onModuleInit() {
        this.logger.log('üöÄ Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

        const adminTelegramId = process.env.ADMIN_TELEGRAM_ID;
        if (adminTelegramId) {
            try {
                await this.bot.telegram.sendMessage(
                    adminTelegramId,
                    `ü§ñ Bot –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.</b>\n\n<i>–ü–æ–¥–∫–ª—é—á–µ–Ω–æ:</i> ${new Date().toLocaleString()}`,
                    { parse_mode: 'HTML' }
                );
                this.logger.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É: ${adminTelegramId}`);
            } catch (error) {
                this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: ${error.message}`);
            }
        } else {
            this.logger.warn('‚ö†Ô∏è ADMIN_TELEGRAM_ID –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env');
        }
    }

    @Start()
    @Command('start')
    async handleStart(@Ctx() ctx: any) {
        const { id, username, first_name, last_name } = ctx.from;
        const telegramId = id.toString();
        const startParam = ctx.startPayload || '';
        const photoUrl = await this.getUserPhoto(id);

        let referrerId: string | null = null;
        if (startParam.startsWith('ref_')) {
            const extractedId = startParam.replace('ref_', '');
            if (extractedId === telegramId) {
                await ctx.reply('üôÉ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.');
            } else {
                referrerId = extractedId;
            }
        }

        try {
            await this.userService.registerUser({
                telegramId,
                username,
                firstName: first_name,
                lastName: last_name,
                photoUrl,
                referrerId,
            });

            this.logger.log(
                `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω${referrerId ? ` (—Ä–µ—Ñ: ${referrerId})` : ''}`
            );

            const referralLink = `https://t.me/${process.env.TELEGRAM_BOT_NAME}?start=ref_${telegramId}`;

            this.navigationStacks.set(id, ['start']);

            await ctx.reply(
                `üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TableMaster, ${first_name || '–ò–≥—Ä–æ–∫'}!</b>\n\n` +
                `üì® <i>–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã!</i>\n\n` +
                `üîó <b>–í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n` +
                `${referralLink}\n\n` +
                `üéÅ <b>–ó–∞ –∫–∞–∂–¥—ã—Ö 5 –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤</b> –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ <b>–±–æ–Ω—É—Å–Ω—ã–µ –º–æ–Ω–µ—Ç—ã</b>! ü™ô\n\n` +
                `üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:`,
                {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å Mini App',
                                    web_app: { url: process.env.MINI_APP_URL },
                                },
                            ],
                            [
                                { text: 'üí∞ –§–∏–Ω–∞–Ω—Å—ã', callback_data: 'finance_menu' },
                            ],
                            [
                                {
                                    text: 'üîó –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞',
                                    callback_data: `copy_ref_${telegramId}`,
                                },
                            ],
                        ],
                    },
                }
            );
        } catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ${telegramId}: ${error.message}`);
            await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ!');
        }
    }

    @Action(/copy_ref_(.+)/)
    async handleCopyReferral(@Ctx() ctx: any) {
        const telegramId = ctx.match[1];
        const referralLink = `https://t.me/${process.env.TELEGRAM_BOT_NAME}?start=ref_${telegramId}`;
        await ctx.reply(`üîó –í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n${referralLink}`);
    }

    @Action('navigate_back')
    async handleNavigateBack(@Ctx() ctx: any) {
        const userId = ctx.from.id;
        const prevScreen = this.popFromStack(userId);

        if (!prevScreen) return this.handleStart(ctx);

        switch (prevScreen) {
            case 'finance_menu':
                return this.showFinanceMenu(ctx);
            case 'finance_topup':
                return this.handleFinanceTopup(ctx);
            case 'start':
                return this.handleStart(ctx);
            default:
                return this.handleStart(ctx);
        }
    }

    @Command('finance')
    @Action('finance_menu')
    async showFinanceMenu(@Ctx() ctx: any) {
        this.pushToStack(ctx.from.id, 'finance_menu');

        const balance = await this.userService.getBalanceByTelegramId(ctx.from.id.toString());

        await ctx.reply(
            `üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>${balance} USDT</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
            {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å', callback_data: 'finance_topup' }],
                        [{ text: 'üì§ –í—ã–≤–µ—Å—Ç–∏', callback_data: 'finance_withdraw' }],
                        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'navigate_back' }],
                    ],
                },
            }
        );
    }

    @Action('finance_topup')
    async handleFinanceTopup(@Ctx() ctx: any) {
        this.pushToStack(ctx.from.id, 'finance_topup');

        await ctx.reply('üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è USDT:', {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '3 USDT', callback_data: 'topup_amount_3' },
                        { text: '5 USDT', callback_data: 'topup_amount_5' },
                        { text: '10 USDT', callback_data: 'topup_amount_10' },
                    ],
                    [
                        { text: '15 USDT', callback_data: 'topup_amount_15' },
                        { text: '25 USDT', callback_data: 'topup_amount_25' },
                    ],
                    [
                        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'navigate_back' },
                    ],
                ],
            },
        });
    }

    @Action(/topup_amount_(\d+)/)
    async handleTopupAmount(@Ctx() ctx: any) {
        const telegramId = ctx.from.id;
        const amount = parseInt(ctx.match[1]);

        if (isNaN(amount) || amount < 3) {
            await ctx.reply('‚ö†Ô∏è –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 USDT.');
            return;
        }

        this.userTopupSelections.set(telegramId, amount);

        await ctx.reply(
            `–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ <b>${amount} USDT</b>. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
            {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: 'topup_confirm' },
                            { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'navigate_back' },
                        ],
                    ],
                },
            }
        );
    }

    @Action('topup_confirm')
    async handleTopupConfirm(@Ctx() ctx: any) {
        const telegramId = ctx.from.id;
        const amount = this.userTopupSelections.get(telegramId);

        if (!amount || amount < 3) {
            await ctx.reply('‚ö†Ô∏è –°—É–º–º–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.');
            return;
        }

        try {
            const invoice = await this.paymentsService.createInvoice({
                amount,
                currency: 'USDT',
                description: `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${telegramId}`,
                callbackUrl: `${process.env.BACKEND_URL}/payments/webhook`,
            }, telegramId);

            await ctx.replyWithHTML(
                `üí∞ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ ${amount} USDT</b>\n\n` +
                `–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ:\n\n` +
                `–ï—Å–ª–∏ —É –≤–∞—Å –µ—â—ë –Ω–µ—Ç USDT ‚Äî —Å–Ω–∞—á–∞–ª–∞ –∫—É–ø–∏—Ç–µ –µ–≥–æ –Ω–∞ –∫—Ä–∏–ø—Ç–æ-–∫–æ—à–µ–ª—ë–∫ —á–µ—Ä–µ–∑ –Ω–∞–¥—ë–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å.`,
                {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚úÖ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', url: invoice.link }],
                            [{ text: 'üí± –ö–∞–∫ –∫—É–ø–∏—Ç—å USDT –∑–∞ —Ä—É–±–ª–∏?', callback_data: 'main_buy_usdt' }],
                            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'finance_menu' }],
                        ],
                    },
                }
            );
        } catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞: ${error.message}`);
            await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }

    @Action('main_buy_usdt')
    async handleMainBuyUsdt(@Ctx() ctx: any) {
        await ctx.replyWithHTML(
            `üí± <b>–ö–∞–∫ –∫—É–ø–∏—Ç—å USDT –∑–∞ —Ä—É–±–ª–∏ (–µ—Å–ª–∏ —É –≤–∞—Å –µ—â—ë –Ω–µ—Ç)</b>\n\n` +
            `USDT ‚Äî —ç—Ç–æ —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞, –∫–æ—Ç–æ—Ä–∞—è –≤—Å–µ–≥–¥–∞ —Ä–∞–≤–Ω–∞ 1 –¥–æ–ª–ª–∞—Ä—É –°–®–ê.\n` +
            `–û–Ω–∞ –Ω—É–∂–Ω–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤ –∏–≥—Ä–µ.\n\n` +
            `ü™ô <b>–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:</b>\n` +
            `1. –°–æ–∑–¥–∞–π—Ç–µ –∫—Ä–∏–ø—Ç–æ-–∫–æ—à–µ–ª—ë–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, <b>Trust Wallet</b>, <b>Binance</b> –∏–ª–∏ <b>Tonkeeper</b>)\n` +
            `2. –ü–æ–ª—É—á–∏—Ç–µ <b>–∞–¥—Ä–µ—Å –≤ —Å–µ—Ç–∏ TRC20</b> ‚Äî –æ–Ω –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞\n` +
            `3. –ö—É–ø–∏—Ç–µ USDT —á–µ—Ä–µ–∑ P2P (–Ω–∞–ø—Ä–∏–º–µ—Ä, Bitpapa)\n\n` +
            `üî∏ –û–ø–ª–∞—Ç–∏—Ç—å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã –†–§, –ÆMoney, –°–ë–ü –∏ –¥—Ä—É–≥–∏–µ\n` +
            `üîó <a href="https://bitpapa.com/ru/buy-usdt">–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ Bitpapa</a>\n\n` +
            `‚ùó –ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ USDT –Ω–∞ —Å–≤–æ–π –∫—Ä–∏–ø—Ç–æ-–∫–æ—à–µ–ª—ë–∫ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏`,
            {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'finance_menu' }],
                    ],
                },
            }
        );
    }

    private async getUserPhoto(userId: number): Promise<string | null> {
        try {
            const photos = await this.bot.telegram.getUserProfilePhotos(userId, 0, 1);
            if (photos.total_count > 0) {
                const fileId = photos.photos[0][0].file_id;
                const file = await this.bot.telegram.getFile(fileId);
                return `https://api.telegram.org/file/bot${process.env.TELEGRAM_BOT_TOKEN}/${file.file_path}`;
            }
        } catch (error) {
            this.logger.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –¥–ª—è ${userId}: ${error.message}`);
        }
        return null;
    }


    @Command('withdraw')
    @Action('finance_withdraw')
    async handleWithdraw(@Ctx() ctx: any) {
        const telegramId = ctx.from.id.toString();
        const user = await this.userService.findByTelegramId(telegramId);

        if (!user || user.balance.toNumber() < 3) {
            await ctx.reply('‚ùå –î–ª—è –≤—ã–≤–æ–¥–∞ —É –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 3 USDT.');
        }

        else {
            await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –∞–¥—Ä–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `5 USDT TRC20-–∞–¥—Ä–µ—Å`', {
                parse_mode: 'Markdown',
            });
        }


        this.pushToStack(ctx.from.id, 'awaiting_withdraw_data');
    }

    @On('text')
    async handleText(@Ctx() ctx: any) {
        const stack = this.navigationStacks.get(ctx.from.id);
        const last = stack?.[stack.length - 1];

        if (last === 'awaiting_withdraw_data') {
            const [amountStr, ...rest] = ctx.message.text.split(' ');
            const address = rest.join(' ');
            const amount = parseFloat(amountStr);

            if (!amount || !address) {
                await ctx.reply('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑: `5 TRC20-–∞–¥—Ä–µ—Å`');
                return;
            }

            const user = await this.userService.findByTelegramId(ctx.from.id.toString());

            if (!user || +user.balance < amount) {
                await ctx.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.');
                return;
            }

            // üî• –ù–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Å–∫–æ–ª—å–∫–æ –∑–∞—è–≤–æ–∫ —É–∂–µ —Å–æ–∑–¥–∞–Ω–æ
            const pendingCount = await this.prisma.withdrawalRequest.count({
                where: {
                    userId: user.id,
                    status: { in: ['pending', 'processing'] }, // –ò–ª–∏ null, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π
                },
            });

            if (pendingCount >= 5) {
                await ctx.reply('üö´ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å 5 –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫. –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –∞–¥–º–∏–Ω –∏—Ö —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç.');
                return;
            }

            // ‚úÖ –°–æ–∑–¥–∞—ë–º –∑–∞—è–≤–∫—É
            const withdrawal = await this.prisma.withdrawalRequest.create({
                data: {
                    userId: user.id,
                    amount,
                    address,
                },
            });


            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            const adminId = process.env.ADMIN_TELEGRAM_ID;

            if (adminId) {
                try {
                    await this.bot.telegram.sendMessage(
                        adminId,
                        `üì§ <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</b>\n\n` +
                        `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>${user.firstName || ''} ${user.lastName || ''} (${user.telegramId})</code>\n` +
                        `üí∏ –°—É–º–º–∞: <b>${amount} USDT</b>\n` +
                        `üè¶ –ê–¥—Ä–µ—Å: <code>${address}</code>\n\n` +
                        `üÜî ID –∑–∞—è–≤–∫–∏: ${withdrawal.id}`,
                        { parse_mode: 'HTML' }
                    );
                } catch (error) {
                    this.logger.warn(`‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞: ${error.message}`);
                }
            }

            this.popFromStack(ctx.from.id);
            await ctx.reply('‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
        }
    }



}
